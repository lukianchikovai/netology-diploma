---
- name: Deploy Infrastructure Components
  hosts: bastion
  become: true
  tasks:
    - name: Configure SSH access via bastion
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?ProxyJump'
        line: 'ProxyJump bastion'
      notify:
        - restart sshd

    - name: Restart SSH service
      service:
        name: sshd
        state: restarted

    - name: Create NAT Gateway
      shell: |
        yandex vpc nat-gateway create \
          --name nat-gateway \
          --network-id {{ var.yc_network_id }} \
          --subnet-id {{ var.yc_subnet_id }}

    - name: Configure Load Balancer for Web Servers
      shell: |
        yandex lb target-group create \
          --name web-servers \
          --network-id {{ var.yc_network_id }} \
          --region-id {{ var.yc_zone }} \
          --address "{{ item }}"
      loop:
        - "{{ yandex_compute_instance.web1.network_interface[0].ip_address }}"
        - "{{ yandex_compute_instance.web2.network_interface[0].ip_address }}"

- name: Install Python 3
  hosts: all
  become: true
  tasks:
    - name: Install Python 3
      apt:
        name: python3
        state: present
      when: ansible_os_family == "Debian"

- name: Configure Web Servers
  hosts:
    - web1.ru-central1.internal
    - web2.ru-central1.internal
  become: true
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Copy index.html to web servers
      copy:
        src: /path/to/local/index.html
        dest: /var/www/html/index.html
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Configure Nginx for static site
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify:
        - restart nginx

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

- name: Install and Configure Monitoring Tools
  hosts:
    - web1.ru-central1.internal
    - web2.ru-central1.internal
    - zabbix.ru-central1.internal
    - elasticsearch.ru-central1.internal
  become: true
  tasks:
    - name: Install Zabbix Agent
      apt:
        name: zabbix-agent
        state: present

    - name: Configure Zabbix Agent
      template:
        src: zabbix_agentd.conf.j2
        dest: /etc/zabbix/zabbix_agentd.conf
      notify:
        - restart zabbix-agent

    - name: Restart Zabbix Agent
      service:
        name: zabbix-agent
        state: restarted

    - name: Install Elasticsearch
      apt:
        name: elasticsearch
        state: present

    - name: Configure Elasticsearch
      template:
        src: templates/elasticsearch.yml.j2
        dest: /etc/elasticsearch/elasticsearch.yml
      notify:
        - restart elasticsearch

    - name: Install Kibana
      apt:
        name: kibana
        state: present

    - name: Configure Kibana
      template:
        src: templates/kibana.yml.j2
        dest: /etc/kibana/kibana.yml
      notify:
        - restart kibana

    - name: Install Filebeat
      apt:
        name: filebeat
        state: present

    - name: Configure Filebeat
      template:
        src: filebeat.yml.j2
        dest: /etc/filebeat/filebeat.yml
      notify:
        - restart filebeat

    - name: Restart Filebeat
      service:
        name: filebeat
        state: restarted

- name: Manage Snapshots
  hosts: localhost
  tasks:
    - name: Create Snapshots of VM Disks
      shell: |
        # Create snapshots for each VM
        for vm in {{ range(0, 2) | list }}; do
          yandex compute snapshot create \
            --name web-disk-snapshot-{{ vm }} \
            --disk-id "{{ yandex_compute_instance.web[vm].boot_disk[0].disk_id }}"
        done
        for vm in 3 4; do
          yandex compute snapshot create \
            --name elasticsearch-disk-snapshot \
            --disk-id "{{ yandex_compute_instance.elasticsearch.boot_disk[0].disk_id }}"
          yandex compute snapshot create \
            --name kibana-disk-snapshot \
            --disk-id "{{ yandex_compute_instance.kibana.boot_disk[0].disk_id }}"
        done
      register: snapshot_creation

    - name: Schedule Daily Snapshot Creation
      cron:
        name: "Create daily snapshots of VM disks"
        minute: "0"
        hour: "1"
        job: |
          #!/bin/bash
          for vm in {{ range(0, 2) | list }}; do
            yandex compute snapshot create \
              --name web-disk-snapshot-$(date +%F)-{{ vm }} \
              --disk-id "{{ yandex_compute_instance.web[vm].boot_disk[0].disk_id }}"
          done
        state: present

    - name: Retain Snapshots for One Week
      cron:
        name: "Remove old snapshots"
        minute: "0"
        hour: "2"
        job: |
          #!/bin/bash
          # Define retention period (in days)
          RETENTION_DAYS=7

          # Get the current date in seconds since epoch
          CURRENT_DATE=$(date +%s)

          # List snapshots and filter out old ones
          yandex compute snapshot list | while read -r line; do
            SNAPSHOT_DATE=$(echo $line | awk '{print $4}')
            SNAPSHOT_ID=$(echo $line | awk '{print $1}')

            # Convert snapshot date to seconds since epoch
            SNAPSHOT_DATE_EPOCH=$(date -d "$SNAPSHOT_DATE" +%s)

            # Calculate age of snapshot (in days)
            SNAPSHOT_AGE=$(( (CURRENT_DATE - SNAPSHOT_DATE_EPOCH) / 86400 ))

            # Delete snapshot if it is older than retention period
            if [ "$SNAPSHOT_AGE" -gt "$RETENTION_DAYS" ]; then
              yandex compute snapshot delete --snapshot-id $SNAPSHOT_ID
            fi
          done
        state: present

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart sshd
      service:
        name: sshd
        state: restarted

    - name: restart zabbix-agent
      service:
        name: zabbix-agent
        state: restarted

    - name: restart elasticsearch
      service:
        name: elasticsearch
        state: restarted

    - name: restart kibana
      service:
        name: kibana
        state: restarted

    - name: restart filebeat
      service:
        name: filebeat
        state: restarted
